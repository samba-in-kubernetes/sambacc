
[tox]
envlist = flake8, formatting, {py3,py39}-mypy, py3, py39, schemacheck, py3-sys
isolated_build = True

[testenv]
description = Run unit tests
passenv =
    WRITABLE_PASSWD
    NSS_WRAPPER_PASSWD
    NSS_WRAPPER_GROUP
deps =
    pytest
    pytest-cov
    dnspython
    -e .[validation,yaml,toml]
commands =
    py.test -v --cov=sambacc --cov-report=html {posargs:tests}

[testenv:{py3,py39}-mypy]
description = Run mypy static checker tool
deps =
    mypy
    types-setuptools
    types-pyyaml
    types-jsonschema>=4.10
    types-protobuf
    types-grpcio
    tomli
    {[testenv]deps}
commands =
    mypy sambacc tests

[testenv:py3-sys]
description = Run unit tests with system packages to validate Samba integration
# py3-sys -- more like sisyphus, am I right?
#
# In order to run tests that rely on "system level" packages (samba,
# xattr, etc.), and not have a lot of test skips, we have to enable the
# sitepackages option. However when it is enabled and you already have a tool
# (mypy, pytest, etc.) installed at the system tox emits a `command found but
# not installed in testenv` warning. We can avoid all those warnings except for
# the 'py3' env by putting all that system enablement stuff only in this
# section.
sitepackages = True
deps =
    pytest
    pytest-cov
    dnspython
    inotify_simple
    pyxattr
allowlist_externals =
    /usr/bin/py.test

[testenv:formatting]
description = Check the style/formatting for the source files
deps =
    black>=24, <25
commands =
    black --check -v --extend-exclude sambacc/grpc/generated .

[testenv:flake8]
description = Basic python linting for the source files
deps =
    flake8
commands =
    flake8 --exclude sambacc/grpc/generated sambacc tests

[testenv:schemacheck]
description = Check the JSON Schema files are valid
deps =
    black>=24, <25
    PyYAML
commands =
    python -m sambacc.schema.tool

[testenv:schemaupdate]
description = Regenerate source files from JSON Schema file(s)
deps =
    black>=24, <25
    PyYAML
commands =
    python -m sambacc.schema.tool --update

# this gitlint rule is not run by default.
# Run it manually with: tox -e gitlint
[testenv:gitlint]
description = Check the formatting of Git commit messages
deps =
    gitlint==0.19.1
commands =
    gitlint -C .gitlint --commits origin/master.. lint


# IMPORTANT: note that there are two environments provided here for generating
# the grpc/protobuf files. One uses a typical tox environment with versions
# and the other uses system packages (sitepackages=True).
# The former is what developers are expected to use HOWEVER because we must
# deliver on enterprise linux platforms we provide a way to generate
# the code using system packages for comparison purposes.

# Generate grpc/protobuf code from .proto files.
# Includes a generator for .pyi files.
# Uses sed to fix the foolish import behavior of the grpc generator.
[testenv:grpc-generate]
description = Generate gRPC files
deps =
    grpcio-tools ~= 1.48.0
    protobuf ~= 3.19.0
    mypy-protobuf
allowlist_externals = sed
commands =
    python -m grpc_tools.protoc \
        -I sambacc/grpc/protobufs \
        --python_out=sambacc/grpc/generated \
        --grpc_python_out=sambacc/grpc/generated \
        --mypy_out=sambacc/grpc/generated \
        sambacc/grpc/protobufs/control.proto
    sed -i -E 's/^import.*_pb2/from . \0/' \
        sambacc/grpc/generated/control_pb2_grpc.py

# Generate grpc/protobuf code from .proto files using system packages.
# Does NOT include a generator for .pyi files.
# Uses sed to fix the foolish import behavior of the grpc generator.
[testenv:grpc-sys-generate]
description = Generate gRPC files using system python packages
sitepackages = True
allowlist_externals = sed
commands =
    python -m grpc_tools.protoc \
        -I sambacc/grpc/protobufs \
        --python_out=sambacc/grpc/generated \
        --grpc_python_out=sambacc/grpc/generated \
        sambacc/grpc/protobufs/control.proto
    sed -i -E 's/^import.*_pb2/from . \0/' \
        sambacc/grpc/generated/control_pb2_grpc.py
